% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/helpers.R
\name{gg_scoreplot}
\alias{gg_scoreplot}
\title{PCA and (O)PLS(-DA) score plots}
\usage{
gg_scoreplot(
  se,
  model.c = "",
  components.vi = c(1, 2),
  label.c = c("", "sample_names")[2],
  color.c = "",
  title.c = "",
  palette.c = "Set1",
  legend.c = "right",
  ellipse.l = TRUE,
  plotly.l = FALSE,
  info.vc = "sample_names",
  size.ls = list(axis_lab.i = 16, axis_text.i = 14, point.i = 3, label.i = 5, title.i =
    20, legend_title.i = 15, legend_text.i = 15)
)
}
\arguments{
\item{se}{SummarizedExperiment: generated by the 'ropls::opls' modeling}

\item{model.c}{character(1): name of the model to be plotted; use 'names(ropls::getOpls(se))'
to see the available models in the se object}

\item{components.vi}{integer(2): number of the components to display as x and y axis}

\item{label.c}{character(1): name of the colData column to be used for the labels}

\item{color.c}{character(1): name of the colData column to be used for the colors}

\item{title.c}{character(1): plot title}

\item{palette.c}{character(1): name of the RColorBrewer palette (for qualitative factor)}

\item{ellipse.l}{logical(1): should ellipses be drawn (for qualitative factor)}

\item{plotly.l}{logical(1): should the ggplot be converted to an interactive
plotly (default: FALSE)}

\item{info.vc}{character(): names of the colData columns to be used for the plotly info;
the default 'sample_names' will return the sample names as the plotly info}

\item{size.ls}{list: sizes for axis labels (default: 16), axis text (default: 14),
points (default: 3), labels (default = 5), title (default = 20), legend title (default: 15),
legend text (default: 15)}
}
\value{
invisible ggplot2 (or ggplotly) object
}
\description{
Score plot visualization for PCA and (O)PLS(-DA) models in either ggplot or ggplotly formats
}
\examples{
# loading the 'sacurine' dataset from the 'ropls' package
data(sacurine, package = "ropls")
sac.se <- sacurine[["se"]]
# computing the PCA
sac.se <- ropls::opls(sac.se)
# score plot
gg_scoreplot(sac.se, "PCA")
gg_scoreplot(sac.se, "PCA", color.c = "age")
gg_scoreplot(sac.se, "PCA", color.c = "gender")
# PLS-DA modeling
sac.se <- ropls::opls(sac.se, "gender")
gg_scoreplot(sac.se, "gender_PLSDA", color.c = "gender")
}
