% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot-methods.R
\docType{methods}
\name{plot,oplsMultiDataSet,ANY-method}
\alias{plot,oplsMultiDataSet,ANY-method}
\alias{plot.oplsMultiDataSet}
\alias{plot,opls-method}
\alias{plot,opls,ANY-method}
\alias{plot.opls}
\title{Plot Method for (O)PLS(-DA)}
\usage{
\S4method{plot}{oplsMultiDataSet,ANY}(x, y, ...)

\S4method{plot}{opls,ANY}(x, y, typeVc = c("correlation", "outlier",
  "overview", "permutation", "predict-train", "predict-test", "summary",
  "x-loading", "x-score", "x-variance", "xy-score", "xy-weight")[7],
  parAsColFcVn = NA, parCexN = 0.8, parCompVi = c(1, 2),
  parEllipsesL = NA, parLabVc = NA, parPaletteVc = NA,
  parTitleL = TRUE, file.pdfC = NULL, .sinkC = NULL,
  parCexMetricN = NA, parSetNameC = NA, fig.pdfC = c("none",
  "interactive", "myfile.pdf")[2], info.txtC = c("none", "interactive",
  "myfile.txt")[2], ...)
}
\arguments{
\item{x}{An S4 object of class \code{oplsMultiDataSet}, created by the \code{opls}
function applied to a MultiDataSet instance
#' @param y Character: if x was generated from an ExpressionSet (i.e. if the 
'eset' slot from x is not NULL), the name of the pData(x) column to be used
for coloring can be specified here (instead of 'parAsColFcVn')}

\item{y}{Character: if x was generated from an ExpressionSet (i.e. if the 
'eset' slot from x is not NULL), the name of the pData(x) column to be used
for coloring can be specified here (instead of 'parAsColFcVn')}

\item{...}{Currently not used.}

\item{typeVc}{Character vector: the following plots are available:
'correlation': Variable correlations with the components, 'outlier':
Observation diagnostics (score and orthogonal distances), 'overview': Model
overview showing R2Ycum and Q2cum (or 'Variance explained' for PCA),
'permutation': Scatterplot of R2Y and Q2Y actual and simulated models after
random permutation of response values; 'predict-train' and 'predict-test':
Predicted vs Actual Y for reference and test sets (only if Y has a single
column), 'summary' [default]: 4-plot summary showing permutation, overview,
outlier, and x-score together, 'x-variance': Spread of raw variables
corresp. with min, median, and max variances, 'x-loading': X-loadings (the 6
of variables most contributing to loadings are colored in red to facilitate
interpretation), 'x-score': X-Scores, 'xy-score': XY-Scores, 'xy-weight':
XY-Weights}

\item{parAsColFcVn}{Optional factor character or numeric vector to be
converted into colors for the score plot; default is NA [ie colors will be
converted from 'y' in case of (O)PLS(-DA) or will be 'black' for PCA]}

\item{parCexN}{Numeric: amount by which plotting text should be magnified
relative to the default}

\item{parCompVi}{Integer vector of length 2: indices of the two components
to be displayed on the score plot (first two components by default)}

\item{parEllipsesL}{Should the Mahalanobis ellipses be drawn? If 'NA'
[default], ellipses are drawn when either a character parAsColVcn is
provided (PCA case), or when 'y' is a character factor ((O)PLS-DA cases).}

\item{parLabVc}{Optional character vector for the labels of observations on
the plot; default is NA [ie row names of 'x', if available, or indices of
'x', otherwise, will be used]}

\item{parPaletteVc}{Optional character vector of colors to be used in the plots}

\item{parTitleL}{Should the titles of the plots be printed on the graphics
(default = TRUE); It may be convenient to set this argument to FALSE when
the user wishes to add specific titles a posteriori}

\item{file.pdfC}{Character: deprecated; use the 'fig.pdfC' argument instead}

\item{.sinkC}{Character: deprecated; use the 'info.txtC' argument instead}

\item{parCexMetricN}{Numeric: magnification of the metrics at the bottom of
score plot (default -NA- is 1 in 1x1 and 0.7 in 2x2 display)}

\item{parSetNameC}{Character: Data set name to be used in the subtitle}

\item{fig.pdfC}{Character: File name with '.pdf' extension for the figure;
if 'interactive' (default), figures will be displayed interactively; if 'none',
no figure will be generated}

\item{info.txtC}{Character: File name with '.txt' extension for the printed
results (call to sink()'); if 'interactive' (default), messages will be
printed on the screen; if 'none', no verbose will be generated}

\item{x}{An S4 object of class \code{opls}, created by the \code{opls}
function.}

\item{...}{Currently not used.}
}
\description{
This function plots values based upon a model trained by \code{opls}.

This function plots values based upon a model trained by \code{opls}.
}
\examples{
# Building the MultiDataSet ('brgeData' Bioconductor package)
data("brge_gexp", package = "brgedata")
brge_gexp <- brge_gexp[1:1000, ]
data("brge_prot", package = "brgedata")
brgeMset <- MultiDataSet::createMultiDataSet()
brgeMset <- MultiDataSet::add_eset(brgeMset, brge_gexp, dataset.type = "expression",
dataset.name = "gexp", warnings = FALSE)
brgeMset <- MultiDataSet::add_eset(brgeMset, brge_prot, dataset.type = "proteomics",
dataset.name = "prot", warnings = FALSE)
# Summary of the MultiDataSet
brgeMset
# Buidling PCA models for each dataset
brgePca <- ropls::opls(brgeMset)
# Coloring the score plots by gender
plot(brgePca, "sex", typeVc = "x-score")

data(sacurine)
attach(sacurine)

for(typeC in c("correlation", "outlier", "overview",
               "permutation", "predict-train","predict-test",
               "summary", "x-loading", "x-score", "x-variance",
               "xy-score", "xy-weight")) {

    print(typeC)

    if(grepl("predict", typeC))
        subset <- "odd"
    else
        subset <- NULL

    plsModel <- opls(dataMatrix, sampleMetadata[, "gender"],
                     predI = ifelse(typeC != "xy-weight", 1, 2),
                     orthoI = ifelse(typeC != "xy-weight", 1, 0),
                     permI = ifelse(typeC == "permutation", 10, 0),
                     subset = subset,
                     info.txtC = "none",
                     fig.pdfC = "none")

    plot(plsModel, typeVc = typeC)

}

sacPlsda <- opls(dataMatrix, sampleMetadata[, "gender"])
plot(sacPlsda, parPaletteVc = c("green4", "magenta"))

#### Application to an ExpressionSet

sacSet <- Biobase::ExpressionSet(assayData = t(dataMatrix), 
                                 phenoData = new("AnnotatedDataFrame", 
                                                 data = sampleMetadata), 
                                 featureData = new("AnnotatedDataFrame", 
                                                   data = variableMetadata),
                                 experimentData = new("MIAME", 
                                                      title = "sacurine"))
                                                      
sacPlsda <- opls(sacSet, "gender")
plot(sacPlsda, "gender", typeVc = "x-score")

detach(sacurine)

}
